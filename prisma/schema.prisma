// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRolesEnum {
  DONOR
  APPLICANT
  CENTER_ADMIN
  SYSTEM_ADMIN
}

model User {
  id                Int @id @default(autoincrement())
  login             String @db.VarChar(64) @unique
  passwordHash      String @db.VarChar(60)
  firstName         String @db.VarChar(64)
  lastName          String @db.VarChar(64)
  patronymic        String? @db.VarChar(64)
  role              UserRolesEnum
  donations         Donation[]
  employedCenter    Center? @relation(fields: [employedCenterId], references: [id])
  employedCenterId  Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum DonationTypeEnum {
  WHOLE_BLOOD
  PLASMA
  PLATELETS
}

enum DonationStatusesEnum {
  PENDING
  APPROVED
  DECLINED
}

model Donation {
  id          Int @id @default(autoincrement())
  type        DonationTypeEnum
  status      DonationStatusesEnum
  userId      Int
  donor       User @relation(fields: [userId], references: [id])
  centerId    Int
  center      Center @relation(fields: [centerId], references: [id])
  requestId   Int?
  request     DonationRequest? @relation(fields: [requestId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model City {
  id          Int @id @default(autoincrement())
  name        String @db.VarChar(64) @unique
  centers     Center[]
  latitude    Decimal
  longitude   Decimal
  botLocales  BotLocales[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Center {
  id          Int @id @default(autoincrement())
  name        String @db.VarChar(128)
  address     String? @db.VarChar(128)
  cityId      Int
  city        City @relation(fields: [cityId], references: [id])
  users       User[]
  latitude    Decimal
  longitude   Decimal
  requests    DonationRequest[]
  donations   Donation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BotLanguagesEnum {
  UZ
  EN
  RU
}

model BotLocales {
  id          Int @id @default(autoincrement())
  name        String @db.VarChar(32)
  text        String
  language    BotLanguagesEnum
  cities      City[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, language])
}

model BotUser {
  id          Int @id
  language    BotLanguagesEnum
}

enum BloodGroupsEnum {
  PosA
  PosB
  PosAB
  Pos0
  NegA
  NegB
  NegAB
  Neg0
}

model DonationRequest {
  id          Int @id @default(autoincrement())
  firstName   String? @db.VarChar(64)
  lastName    String? @db.VarChar(64)
  patronymic  String? @db.VarChar(64)
  type        DonationTypeEnum
  groups      BloodGroupsEnum[]
  donations   Donation[]
  count       Int
  centerId    Int
  center      Center @relation(fields: [centerId], references: [id])
  dateTo      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
